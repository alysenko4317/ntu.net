запустити MSVS Installer
перевірити що встановлено .NET Development компоненты та WCF у складі ціх компонентів

створити рішення яке буде складатися з 3-х проектів
  - бібліотека класів
  - сервер
  - кліент

зразу створюэмо ці три проекти на базі .NET Framework
  - бібліотеку класів
  - сервер - консольний додаток
  - кліент - Windows Form додаток

почнемо з бібліотеки класів
  - додати посілання на System.ServiceModel
  - бібліотека класів буде складатися з класу, який буде доступний для виклику з клієнтів, цей клас
    буде розміщено на сервері, буде створено його екземпляр...
    так як серве буде один, то скоріше за все нас цікавить патерн синглтон
  - створюємо класс ChatService, який буде реалізовувати інтерфейс IChatService
  - матиме три методи: Connect, Disconnect, SendMessage

  - для підключення функціоналу WCF використовуємо атрибути
        [ServiceBehavior(InstanceContextMode = InstanceContextMode.Single)]  для класу
        [ServiceContract] для інтерфейсу
        [OperationContract] для методів

  - сервер буде зберігати перелік користувачів, які в онлайні, тому буде
      List<ChatUser> _connectedUsers = new List<>() і відповідно класс ChatUser який матимемє наступні властивості:
         Id
         Name
         OperationContext Context (зв'язок з користувачем)

  - в нас буде двосторонній зв'язок, так як сервер повинен розсилати отримане повідомлення всім клієнтам, тому
    нам потрібен ще один інтерфейс:  IChatServiceCallback
  - тут також повинні використовуватись атрибути [ServiceContract] та [OperationContract]
    для методу SendMessageToClient
  - цей тип інтерфейсу треба привьязати до ServiceContract інтерфейсу IChatService:
      [ServiceContract(CallbackContract = typeof(IChatServiceCallback))]

=======================================

  далі переходимо до реалізаціі сервера:

      - додаємо новий елемент WCF Service (в осовному це нам потрыбно для того щоб згенерувався конфіг)
          код сгенерований можна видалити, так як у нас код сервісу реалізовано в бібліотеці
      - далі в коді потрібно лише створити host та забезпечити його працювання,
          об'єкт такий створюється наступним чином:
             using (var host = new ServiceHost(typeof(ChatService)))
             { ... }
      - також треба додати залежність від  System.ServiceModel (щоб використати ServiceHost)
      - також треба додати залежність від нашої бібліотеки біліотеки (щоб використати ChatService)
      - правимо конфіг ...
           behaviourName встановлюэмо в mex  (metadata exchange)
           serviceMetadata - дозволити передавати метадані про методи
           serviceDebug ... - також встановити в true (можна продемонструвати помилку, наприклад
              зробити два методи з однаковими іменами, наприклад SendMessage)
           service name та додати behaviourConfiguration=mex (див. behaviourName)
           endpoint - точка для підключення
              встановлюэмо порти, адреси скорочюэмо
      - можна запускати сервер, але необхыдны права адмыныстратора

==========================================

тепер із запущеним сервером треба писати клієнт

     - додаємо зразу Add Service Reference
         вказуємо відповідну адресу з зазначенням протоколу тобто http://localost:port
         також краще змінити ім'я на ChatServiceReference
     - можна продемонструвати також в браузері відкриття цього УРЛа та генерацію помилки (див. serviceDebug)
     - можна продемонструвати метадані

     - конфіг кліента сгенерувався автоматично
     - створюємо головну форму з кнопками (connect, send та можливістю вказати nickName та написати повыдомлення,
       а також друкувати chatHistory)

     - створити клас, за допомогою якого ми будемо взаэмодіяти з сервером - ChatServerConnector
         це буде синглтон, так як з'єднання з сервером буде тільки одне, тобто оформлюємо приватний консруктор
         та метод getInstance

     - далі щоб взаємодіяти з сервером ми будемо використовувати класс ChatServiceClient
       який було сгенеровано автоматично. нам потрібно створити об'єкт цього класу, а для того
       щоб сервер міг взаємодіяти з кліентом, наш клас ChatServerConnector повинен реалізовувати
       інтерфейс IChatServiceCallback

     - далі пишемо методи Connect та SendMessageToServer які будуть використовуватись з форми. Ці методи
       можна зробити статичними, так як у нас синглтон. Вони будуть просто визимати відповідні методи з класу
       ChatServiceClient

     - і нарешті для того щоб друкувалась chatHistory нам потрыбно реалізувати метод SendMessageToClient
       який звертається до форми
           (Application.OpenForms["Form1"] as Form1).lstChatHistory.Items.Add(msg);
       треба зазначити що lstChatHistory має мати модифікатор public (це можна задати у конструкторі інтерфейсу) 

     - все, можна запускати декылька клієнтів; якщо в конфігі localhost замынити на нормальну ip адресу,
       то додаток буде працювати в локальній мережі

     - далі можна вдосконалювати (приватні повідомлення, та інше)

  

      

